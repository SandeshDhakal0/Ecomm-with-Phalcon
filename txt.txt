<!-- <h1>User</h1>
<?php if(property_exists($single,'id')):?>
<?=$single->id ?>
<?=$single->email ?>

<?php foreach($single-> project as $p):?>
    <?=$p->id ?>
    <?=$p->title ?>
    <?php endforeach;?>

<?php endif; ?>

<hr/>

<?php foreach($all as $user): ?>
    <?=$user->id?>
    <?=$user->email?>
    <?php endforeach; ?> -->



===============This is the config/permission file which was not working=====================


    <?php 

use Phalcon\Mvc\Dispatcher,
    Phalcon\Events\Event,
    Phalcon\Acl;
    // Phalcon\Di\Injectable;

class Permission extends \Phalcon\Di\Injectable
{

    // Constant to prevent a typo
    const GUEST = 'guest';
    const USER = 'user';
    const ADMIN = 'admin';

    protected $_publicResources = [
        'index' => '*',
        'signin' => '*'
    ];
    protected $_userResources = [ 
        'dashboard' => ['*']
    ];
    protected $_adminResources = [
        'admin' => ['*']
    ];

    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)
    {
        // Get the current role
        $role = $this->session->get('role');
        if(!$role) {
            $role = self::GUEST;
        }
 
        // Get the current controller/action from the dispatcher
        $controller = $dispatcher->getControllerName();
        $action     = $dispatcher->getActionName();
        // Get the ACL Rule List
        $acl = $this->_getAcl();

        //See if they have the permission
        $allowed = $acl->isAllowed($role, $controller, $action);
        if ($allowed != Acl::ALLOW)
        {
            // Allowed
            $this->flash->error("Permission to access this area is denied.");
            $this->response->redirect('index');

            //Stops the dispatcher at the current operations
            return false;
        }
    }

    protected function _getAcl()
    {
        if(!isset($this->persistent->acl))
        {
            $acl = new Acl\Adapter\Memory();
            $acl->setDefaultAction(Acl::DENY);

            $roles = [
                self::GUEST => new Acl\Role(self::GUEST),
                self::USER => new Acl\Role(self::USER),
                self::ADMIN => new Acl\Role(self::ADMIN),
            ];
            foreach($roles as $role){
                $acl->addRole($role);
            }
            //Public Resource 
            foreach($this->_publicResources as $resource => $action){
                $acl->addResource(new Acl\Resource($resource),$action);
            }
            //User Resource
            foreach($this->_userResources as $resource => $action){
                $acl->addResource(new Acl\Resource($resource),$action);
            }
            //Admin Resource
            foreach($this->_adminResources as $resource => $action){
                $acl->addResource(new Acl\Resource($resource),$action);
            }
            //Allow all roles to access the Public Resources
            foreach($roles as $role){
                foreach($this->_publicResources as $resource => $action){
                    $acl->allow($role->getName(), $resource, '*');
                }
            }
            // Allow User and Admin to access the UserResources
            foreach($this->_userResources as $resource => $actions){
                foreach($actions as $action){
                    $acl->allow(self::USER, $resource, $action);
                    $acl->allow(self::ADMIN, $resource, $action);
                }
            }
            // Allow admin to access Admin resources
            foreach($this->_adminResources as $resource => $actions){
                foreach($actions as $action){
                    $acl->allow(self::ADMIN, $resource, $action);
                }
            }
                $this->persistent->acl = $acl;
        }
        return $this->persistent->acl;
    }
}